input {
    file {
        path => "/abc/def/log.log"
        sincedb_path => "/abc/def/sincedb"
    }
}

filter {


    if "block in start_input" in [message] {
        mutate {
            replace => [ "message", ":no-256: %{message} <@slack_id>"]
        }
    } else if "Pipelines running" in [message] {
        mutate {
            replace => [ "message", ":ok-256: Logstash-XMS Restarted <@slack_id>"]
        }
    } else if "ERROR" not in [message] {
        drop { }
    }


}

output {
    stdout {
      codec => rubydebug
    }

    slack {
        url => "Slack Webhook URL"
        channel => "Slack Channel"
        format => "%{message}"
    }

    if "block in start_input" in [message] {
        exec {
          command => "/abc/def/run.sh"
        }
    }
}

# run.sh

#!/bin/bash

FILENAME="/abc/sdb_test"
SDB_NUM=`echo "$(<$FILENAME)"`
#echo $SDB_NUM
NEW_SDB_NUM=$((10#${SDB_NUM}+10))
echo $NEW_SDB_NUM > $FILENAME
supervisorctl restart group:program >/dev/null 2>&1


# ./bin/logstash install logstash-output-exec
# ./bin/logstash install logstash-output-slack

output {
    ...
    slack {
        url => <YOUR SLACK WEBHOOK URL HERE>
        channel => [channel-name - optional]
        username => [slack username - optional]
        icon_emoji => [emoji, something like ":simple_smile:" - optional]
        icon_url => [icon url, would be overriden by icon_emoji - optional]
        format => [default is "%{message}", but used to format the text - optional]
        attachments => [an array of attachment maps as specified by the slack API - optional; if there is an "attachments" field in the event map and it is valid, it will override what is configured here, even if it's empty]
    }
}
